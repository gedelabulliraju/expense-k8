apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend
  namespace: expense
data:
  nginx.conf: | # | represents multi line file
    user www-data;
    worker_processes 4;
    pid /var/run/nginx.pid;

    events {
      worker_connections 768;
      # multi_accept on;
    }

    http {

      ##
      # Basic Settings
      ##

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      large_client_header_buffers 6 32k;
      client_max_body_size 100m;

      # server_names_hash_bucket_size 64;
      # server_name_in_redirect off;
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      ##
      # Logging Settings
      ##
      access_log /var/log/nginx/access.log;
      error_log /var/log/nginx/error.log debug; # change from debug to warn or error for production

      ##
      # Gzip Settings
      ##
      gzip on;
      gzip_disable "msie6";

      ##
      # Virtual Host Configs
      ##

      include /etc/nginx/conf.d/*.conf;
      include /etc/nginx/sites-enabled/*;

      server {
        listen       80;
        server_name  localhost;

        proxy_http_version 1.1;

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;
        #error_log /dev/stdout debug;
        #rewrite_log on;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            ssi    on;
        }

        location /images/ {
            expires 5s;
            root   /usr/share/nginx/html;
            try_files $uri /images/placeholder.png;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
        # this is as part of nginx configmap
        location /api/ { 
            proxy_pass http://backend:8080/;
        }

        }

    }
---
kind: Deployment # Deployment for MySQL
apiVersion: apps/v1 # Deployment API version
metadata: # Deployment metadata
  name: frontend # Backend deployment name
  namespace: expense # Namespace for the deployment
  labels: # Labels for the deployment
    project: expense # MySQL project label
    tier: web # API tier label
    app: frontend # Backend application label
spec: # Deployment specification
  replicas: 2 # Number of MySQL replicas
  selector: # Selector to match the MySQL pods
    matchLabels: # Labels to match MySQL pods
      project: expense # MySQL project label
      tier: web # API tier label
      app: frontend # Backend application label
  template: # Template for the MySQL pod
    metadata: # Pod metadata
      labels: # Labels for the pod
        project: expense # MySQL project label
        tier: web # API tier label
        app: frontend # Backend application label
    spec: # Pod specification
      containers: # list ofcontainers in the pod
      - name: frontend # Name of the Backend container
        image: srlaf/frontend:v1 # Backend container image
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          # limits is greater than or equal to requests
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: frontend
          items:
            - key: nginx.conf
              path: nginx.conf
---
kind: Service # Service for backend
apiVersion: v1 # Service API version
metadata: # Service metadata
  name: frontend # MySQL service name
  namespace: expense # Namespace for the service
  labels: # Labels for the service
    project: expense # MySQL project label
    tier: web # API tier label
    app: frontend # Backend application label
spec: # Service specification
  type: LoadBalancer # Service type
  selector: # Selector to match the backend pods
    project: expense # MySQL project label
    tier: web # API tier label
    app: frontend # Backend application label
  ports: # Ports for the service
  - name: frontend # Name of the backend service port
    protocol: TCP # Protocol for the service
    port: 80 # Port for the backend service
    targetPort: 80 # Target port for the backend service